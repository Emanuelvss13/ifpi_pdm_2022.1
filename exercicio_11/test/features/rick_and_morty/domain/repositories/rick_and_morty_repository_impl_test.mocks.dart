// Mocks generated by Mockito 5.0.7 from annotations
// in exercicio_11/test/features/rick_and_morty/domain/repositories/rick_and_morty_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:exercicio_11/core/platform/network_info.dart' as _i7;
import 'package:exercicio_11/data/datasource/rick_and_morty_local_datasource.dart'
    as _i6;
import 'package:exercicio_11/data/datasource/rick_and_morty_remote_datasource.dart'
    as _i4;
import 'package:exercicio_11/data/models/character_model.dart' as _i2;
import 'package:exercicio_11/domain/entities/character.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeCharacterModel extends _i1.Fake implements _i2.CharacterModel {}

class _FakeCharacter extends _i1.Fake implements _i3.Character {}

/// A class which mocks [RickAndMortyRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRickAndMortyRemoteDatasource extends _i1.Mock
    implements _i4.RickAndMortyRemoteDatasource {
  MockRickAndMortyRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.CharacterModel> getCharacterByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#getCharacterByName, [name]),
              returnValue:
                  Future<_i2.CharacterModel>.value(_FakeCharacterModel()))
          as _i5.Future<_i2.CharacterModel>);
  @override
  _i5.Future<_i2.CharacterModel> getRandomCharacter() => (super.noSuchMethod(
          Invocation.method(#getRandomCharacter, []),
          returnValue: Future<_i2.CharacterModel>.value(_FakeCharacterModel()))
      as _i5.Future<_i2.CharacterModel>);
}

/// A class which mocks [RickAndMortyLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRickAndMortyLocalDatasource extends _i1.Mock
    implements _i6.RickAndMortyLocalDatasource {
  MockRickAndMortyLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Character> getLastCharacter() =>
      (super.noSuchMethod(Invocation.method(#getLastCharacter, []),
              returnValue: Future<_i3.Character>.value(_FakeCharacter()))
          as _i5.Future<_i3.Character>);
  @override
  _i5.Future<void> cacheCharacter(_i2.CharacterModel? characterToCache) =>
      (super.noSuchMethod(
          Invocation.method(#cacheCharacter, [characterToCache]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
