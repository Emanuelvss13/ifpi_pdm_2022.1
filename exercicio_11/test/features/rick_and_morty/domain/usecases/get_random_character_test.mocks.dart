// Mocks generated by Mockito 5.0.7 from annotations
// in exercicio_11/test/features/rick_and_morty/domain/usecases/get_random_character_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:exercicio_11/core/errors/failure.dart' as _i5;
import 'package:exercicio_11/domain/entities/character.dart' as _i6;
import 'package:exercicio_11/domain/repositories/ricky_and_morty_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [RickAndMortyRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRickAndMortyRepository extends _i1.Mock
    implements _i3.RickAndMortyRepository {
  MockRickAndMortyRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Character>> getRandomCharacter() =>
      (super.noSuchMethod(Invocation.method(#getRandomCharacter, []),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Character>>.value(
                  _FakeEither<_i5.Failure, _i6.Character>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Character>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Character>> getCharacterByName(
          String? name) =>
      (super.noSuchMethod(Invocation.method(#getCharacterByName, [name]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Character>>.value(
                  _FakeEither<_i5.Failure, _i6.Character>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Character>>);
}
